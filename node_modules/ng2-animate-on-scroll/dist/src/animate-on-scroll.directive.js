"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var scroll_service_1 = require("./scroll.service");
var Subject_1 = require("rxjs/Subject");
require("rxjs/add/operator/takeUntil");
var AnimateOnScrollDirective = (function () {
    function AnimateOnScrollDirective(elementRef, renderer, scroll) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.scroll = scroll;
        this.ngUnsubscribe = new Subject_1.Subject();
    }
    AnimateOnScrollDirective.prototype.ngOnInit = function () {
        var _this = this;
        // default visibility to false
        this.isVisible = false;
        // run visibility check initially in case the element is already visible in viewport
        this.manageVisibility();
        // subscribe to scroll event using service
        this.scroll.scrollObs.takeUntil(this.ngUnsubscribe)
            .subscribe(function () { return _this.manageVisibility(); });
        // subscribe to resize event using service so scrolling position is always accurate
        this.scroll.resizeObs.takeUntil(this.ngUnsubscribe)
            .subscribe(function () { return _this.manageVisibility(); });
    };
    AnimateOnScrollDirective.prototype.ngOnDestroy = function () {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    };
    /**
     * check for visibility of element in viewport to add animation
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.manageVisibility = function () {
        // check for window height, may change with a window resize
        this.getWinHeight();
        // get vertical position for selected element
        this.getOffsetTop();
        // we should trigger the addition of the animation class a little after getting to the element
        var scrollTrigger = this.offsetTop + 80 - this.winHeight;
        // using values updated in service
        if (!this.isVisible && this.scroll.pos >= scrollTrigger) {
            this.addAnimationClass();
        }
    };
    /**
     * utility function to mark element visible and add css class
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.addAnimationClass = function () {
        // mark this element visible, we won't remove the class after this
        this.isVisible = true;
        // use default for animate.css if no value provided
        this.setClass(this.animationName);
    };
    /**
     * utility function to add css class to element in DOM
     *
     * @param  {string} classname
     * @returns void
     */
    AnimateOnScrollDirective.prototype.setClass = function (classname) {
        this.renderer.setElementClass(this.elementRef.nativeElement, classname, true);
    };
    /**
     * get window height utility function
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.getWinHeight = function () {
        this.winHeight = window.screen.height;
    };
    /**
     * get offsetTop value for element
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.getOffsetTop = function () {
        var viewportTop = this.elementRef.nativeElement.getBoundingClientRect().top;
        var clientTop = this.elementRef.nativeElement.clientTop;
        // get vertical position for selected element
        this.offsetTop = viewportTop + this.scroll.pos - clientTop;
    };
    return AnimateOnScrollDirective;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AnimateOnScrollDirective.prototype, "animationName", void 0);
AnimateOnScrollDirective = __decorate([
    core_1.Directive({
        selector: '[animateOnScroll]'
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer, scroll_service_1.ScrollService])
], AnimateOnScrollDirective);
exports.AnimateOnScrollDirective = AnimateOnScrollDirective;
//# sourceMappingURL=animate-on-scroll.directive.js.map