function Node(value) {
        this.value =  value;
        this.next = null;
      }

function SLL() {
  this.head = null;
}

//Given a SLL, a value and a second value 
// find the value within SLL and input the second value before the 
// value found
function prepend(SLL, value, before){
  
    //initiate the node we will be inputting before the value node
    var nNode = new Node(before);
  
    var pointer = SLL.head;
  
    //validation for Singly link list
    if(SLL.head == null){
      return "the SLL is null"
    }
  
    if(SLL.head.val == value){
      nNode .next = SLL.head;
      SLL.head = newNode;
      return SLL;
    }
  
    while(pointer != null) {
      if(pointer.next.val == value) {
          nNode.next = pointer.next;
          pointer.next = nNode;
        return SLL;
      }
      
      
    }
   
  
}




//concat

function conCAt(SLLone, SLLtwo) {
  if(!SLLone && !SLLtwo){
    return "An SLL is null";
  }else if(!SLLone){
    return SLLtwo;
  }else if(!SLLtwo){
    return SLLone;
  }
  
  var pointer = SLLone.head;
  
  while(pointer!=null){
    pointer= pointer.next;
  }
  pointer.next = SLLtwo.head;
    return SLLone; 
}

























console.log("hellso");

  var p = new SLL();
  var n = new Node(7);
  var q = new Node(8);
  var r = new Node(10);
  
  p.head = n;
  p.head.next = q;
  p.head.next.next = r;
  
 
console.log(prepend(p, 8, 5));
// var newSLL = p;
// while(p.head != null){
//   console.log(newSLL.head.val);
//   newSLL.head = newSLL.head.next;
  
// }


